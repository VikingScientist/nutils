Changelog
=========

Nutils is under active development and the API is not frozen. Active
users are advised to keep an eye on this file to stay up to date with
the most prominent user-facing changes.


New: function.Namespace

  The `function.Namespace` object represents a container of
  `function.Array` instances.

  >>> ns = function.Namespace()
  >>> ns.x = geom
  >>> ns.basis = domain.basis('std', degree=1).vector(2)

  In addition to bundling arrays, arrays can be manipulated using index
  notation via string expressions:

  >>> ns.sol_i = 'basis_ni ?dofs_n'
  >>> f = ns.eval_i('sol_i,j n_j')

  For full details of this string syntax see the `function.Namespace`
  documentation.


New: Topology.integral

  Analogous to `Topology.integrate`, which integrates a function and
  returns the result as a (sparse) array, the new method
  `Topology.integral` with identical arguments results in an `Integral`
  object for postponed evaluation.

  Direct:
  >>> x = domain.integrate(f, geometry=geom, degree=2)

  Indirect:
  >>> integ = domain.integral(f, geometry=geom, degree=2)
  >>> x = integ.eval()

  Integral objects support linear transformations, derivatives and
  substitutions. Their main use is in combination with the `solver`
  module (as demonstrated in examples/laplace o.a.).


Removed: TransformChain, CanonicalTransformChain

  Transformation chains (sequences of TransformItems) are stored as
  standard tuples. Former methods of (Canonical)TransformChain are
  replaced by module methods:

  Old:
  >>> elem.transform.promote(ndims)

  New:
  >>> transform.promote(elem.transform, ndims)

  In addition, every edge_transform and child_transform of Reference
  objects is changed from (typically unit-length) TransformChain to
  TransformItem.


Changed: command line interface

  Command line parsers `cli.run` or `cli.choose` dropped support for
  space separated arguments (--arg value), requiring argument and value
  to be joined by an equals sign instead:

  $ python script.py --arg=value

  Boolean arguments are specified by omitting the value and prepending
  'no' to the argument name for negation:

  $ python script.py --pdb --norichoutput

  For convenience, leading dashes have been made optional:

  $ python script.py arg=value pdb norichoutput


New: Topology intersections (deprecates common_refinement)

  Intersections between topologies can be made using the `&` operator.
  In case the operands have different refinement patterns, the resulting
  topology will consist of the common refinements of the intersection.

  New:
  >>> intersection = domainA & domainB

  Note that this operation can also be used to construct interfaces:
  >>> interface = domain['fluid'].boundary & ~domain['solid'].boundary


Changed: Topology.indicator

  The `indicator` method is moved from subtopology to parent topology,
  i.e. the topology you want to evaluate the indicator on, and now takes
  the subtopology is an argument.

  Old:
  >>> ind = domain.boundary['top'].indicator()

  New:
  >>> ind = domain.boundary.indicator(domain.boundary['top'])
  Or equivalently:
  >>> ind = domain.boundary.indicator('top')


Changed: Evaluable.eval

  The `eval` method accepts a flexible number of keyword arguments,
  which are accessible to `evalf` by depending on the `EVALARGS` token.
  Standard keywords are `_transforms` for transformation chains,
  `_points` for integration points, and `_cache` for the cache object.

  Old:
  >>> f.eval(elem, 'gauss2')

  New:
  >>> ipoints, iweights = elem.getischeme('gauss2')
  >>> f.eval(_transforms=[elem.transform, elem.opposite], _points=ipoints)


New: numeric.const

  The `numeric.const` array represents an immutable, hashable array.

  >>> A = numeric.const([[1,2],[3,4]])
  >>> d = {A: 1}

  Existing arrays can be wrapped into a `const` object by adding
  `copy=False`. The `writeable` flag of the original array is set to
  False to prevent subsequent modification.

  >> A = numpy.array([1,2,3])
  >> Aconst = numeric.const(A, copy=False)
  >> A[1] = 4
  ValueError: assignment destination is read-only


New: function annotations

  The `util.enforcetypes` decorator applies conversion methods to
  annotated arguments:

  >>> @util.enforcetypes
  >>> def f(a:float, b:tuple)
  >>>   print(type(a), type(b))
  >>> f(1, [2])
  <class 'float'> <class 'tuple'>

  The decorator is by default active to constructors of cache.Immutable
  derived objects, such as function.Evaluable.


Changed: Evaluable._edit

  Evaluable objects have a default edit implementation that
  re-instantiates the object with the operand applied to all constructor
  arguments.

  Old:
  >>> class A(function.Evaluable):
  >>>   def __init__(self, a, b):
  >>>     self.a = a
  >>>     self.b = b
  >>>   def _edit(self, op):
  >>>     return A(op(self.a), op(self.b))

  New:
  >>> class A(function.Evaluable):
  >>>   def __init__(self, a, b):
  >>>     self.a = a
  >>>     self.b = b

  In situations where the default implementation is not sufficient it
  can be overridden by implementing the `edit` method (note: without the
  underscore):

  >>> class B(function.Evaluable):
  >>>   def __init__(self, d):
  >>>     assert isinstance(d, dict)
  >>>     self.d = d
  >>>   def edit(self, op):
  >>>     return B({key: op(value) for key, value in self.d.items()})


Changed: function.derivative, Array._derivative

  The `axes` argument has been removed; `derivative(func, var)` now
  takes the derivative of `func` to all the axes in `var`.

  Old:
  >>> der = function.derivative(func, var, axes=numpy.arange(var.ndim))

  New:
  >>> der = function.derivative(func, var)


New: cli module

  The util.run function is deprecated and replaced by two new functions,
  cli.choose and cli.run. The new functions are very similar to the
  original, but have a few notable differences:

    * cli.choose requires the name of the function to be executed
      (typically 'main'), followed by any optional arguments
    * cli.run does not require the name of the function to be executed,
      but only a single one can be specified
    * argument conversions follow the type of the argument's default
      value, instead of the result of `eval`
    * the --tbexplore option for post-mortem debugging is replaced by
      --pdb, replacing Nutils' own traceback explorer by Python's
      builtin debugger
    * on-line debugging is provided via the ctrl+c signal handler
    * function annotations can be used to describe arguments in both
      help messages and logging output (see examples/*)


New: solver

  The solver module provides infrastructure to facilitate formulating
  and solving complicated nonlinear problems in a structured and largely
  automated fashion. See that solver documentation and the updated
  finitestrain code for examples.


Changed: pariter, parmap

  The parellel.pariter and parellel.parmap functions now require the
  desired number of processors to be explicitly requested through the
  'nprocs' argument. The parallel.shzeros function always returns an
  shared memory regardless of the value of the global nprocs property,
  which is no longer referenced in the parallel module.


New: topology.with{subdomain,boundary,interfaces,points}

  Topologies have been made fully immutable, which means that the old
  setitem operation is no longer supported. Instead, to add a
  subtopology to the domain, its boundary, its interfaces, or points,
  any of the methods .withsubdomain, .withboundary, .withinterfaces, and
  .withpoints, respectively, will return a copy of the topology with the
  desired groups added.

  Removed syntax:
  >> domain.boundary['wall'] = domain.boundary['left,top']

  New:
  >> domain = domain.withboundary( wall=domain.boundary['left,top'] )
  >> domain.boundary['wall'].integrate( ... )

  Alternative:
  >> domain = domain.withboundary( wall='left,top' )


New: circular symmetry

  Any topology can be revolved using the new .revolved method, which
  interprets the first geometry dimension as a radius and replaces it by
  two new dimensions, shifting the remaining axes backward. In addition
  to the modified topology and geometry, simplifying function is
  returned as the third return value which replaces all occurrences of
  the revolution angle by zero. This should only be used after all
  gradients have been computed, typically in integrate or elem_eval.

  >> rdomain, rgeom, simplify = domain.revolved( geom )
  >> basis = rdomain.basis( 'spline', degree=2 )
  >> M = function.outer( basis.grad(rgeom) ).sum(-1)
  >> rdomain.integrate(M, geometry=rgeom, ischeme='gauss2', edit=simplify)


Changed: supp

  The function.supp convenience function to find the supporting elements
  of certain basis vectors has been deprecated. In its place is the much
  more robust Topology.supp method, which search for supporting elements
  within a topology. In addition to this the selection can be made as an
  index vector or boolean mask, as in the following typical example:

  >> v = domain.integrate(basis*coeffs, geometry=geom, ischeme='gauss2')
  >> supp = domain.supp( basis, abs(v) > threshold )
  >> domain.refined_by( supp )


Removed: pointdata

  The deprecated function.Pointdata is removed. The replacing
  construction is Topology.elem_eval with the asfunction=True argument:

  >>> f_pnt = domain.elem_eval( f, ischeme='gauss2', asfunction=True )
  >>> domain.integrate( f - f_pnt, geometry=geom, ischeme='gauss2' ) == 0


Changed: renamed mesh.gmesh to mesh.gmsh; added support for periodicy

  The gmsh importer was unintentionally misnamed as gmesh; this has been
  fixed. With that the old name is deprecated and will be removed in
  future. In addition, support for the non-physical mesh format and
  externally supplied boundary labels has been removed (see the unit
  test tests/mesh.py for examples of valid .geo format). Support is
  added for periodicity and interface groups.


Changed: function.Inflate, function.DofMap; removed IntVector

  The Inflate class takes a new length argument for the inflated shape.
  The dofmap argument is now a generic int-array function, which removes
  the need for a separate IntVector object; DofMap now derives directly
  from Array.


Changed: renamed ElemFunc to LocalCoords

  Besides the name change the new object is derived from
  DerivativeTargetBase so that it can be used as a derivate target,
  removing the need for a 'localcoords' special token.


Changed: function.asarray

  Formerly asarray returned non-evaluable objects as numpy arrays. The
  new implementation always returns a nutils Array, wrapping constant
  objects in function.Constant.


New: function.Constant

  Wrapper object that returns a numpy array through evalf, introducing a
  singleton point axis at location 0.


New: function.Array with dtype; deprecates function.ArrayFunc

  ArrayFunc is deprecated and will be removed. The new Array base class
  is identical to ArrayFunc except for the mandatory argument 'dtype',
  which takes a value of float, int, or bool.


Release history
---------------

2016-02-18 Released v2.0 "Chuka men"
2014-08-04 Released v1.0 "Bakmi"


vim:textwidth=72
